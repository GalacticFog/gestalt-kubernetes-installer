apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "gestalt.securityName" . }}
  labels:
    gestalt-app: 'security'
    app.kubernetes.io/name: {{ .Release.Name | quote }}
    app.kubernetes.io/app: 'gestalt'
    app.kubernetes.io/component: {{ template "gestalt.securityName" . }}
spec:
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        gestalt-app: 'security'
        app.kubernetes.io/name: {{ .Release.Name | quote }}
        app.kubernetes.io/app: 'gestalt'
        app.kubernetes.io/component: {{ template "gestalt.securityName" . }}
    spec:
      imagePullSecrets:
      - name: imagepullsecret-1
      - name: imagepullsecret-2
      - name: imagepullsecret-3
      - name: imagepullsecret-4
      - name: imagepullsecret-5
      initContainers:
      - name: 'wait-for-db'
        image: {{ .Values.db.waitImage | quote }}
        imagePullPolicy: {{ .Values.common.imagePullPolicy | quote }}
        env:
        - name: 'PGHOST'
          value: {{ template "gestalt.dbHost" . }}
        - name: 'PGDATABASE'
          value: {{ .Values.security.databaseName | quote }}
        - name: 'PGPASS'
          valueFrom:
            secretKeyRef:
              name: {{ template "gestalt.secretsName" . }}
              key: 'db-password'
        - name: 'PGUSER'
          valueFrom:
            secretKeyRef:
              name: {{ template "gestalt.secretsName" . }}
              key: 'db-username'
        - name: 'PGPORT'
          value: {{ template "gestalt.dbPort" . }}
        - name: 'PGCONNECT_TIMEOUT'
          value: '3'
      containers:
      - name: {{ template "gestalt.securityName" . }}
        image: {{ .Values.security.image | quote }}
        imagePullPolicy: {{ .Values.common.imagePullPolicy | quote }}
        ports:
        - containerPort: 9000
          name: 'service-api'
        {{- if .Values.security.enableReadinessProbe }}
        readinessProbe:
          initialDelaySeconds: 30
          periodSeconds: 10
          httpGet:
            path: '/health'
            port: 'service-api'
            scheme: 'HTTP'
        {{- end }}
        {{- if .Values.security.enableLivenessProbe }}
        livenessProbe:
          initialDelaySeconds: 30
          periodSeconds: 10
          httpGet:
            path: '/health'
            port: 'service-api'
            scheme: 'HTTP'
        {{- end }}
        env:
        - name: 'DATABASE_HOSTNAME'
          value: {{ template "gestalt.dbHost" . }}
        - name: 'DATABASE_PORT'
          value: {{ template "gestalt.dbPort" . }}
        - name: 'DATABASE_USERNAME'
          valueFrom:
            secretKeyRef:
              name: {{ template "gestalt.secretsName" . }}
              key: 'db-username'
        - name: 'DATABASE_PASSWORD'
          valueFrom:
            secretKeyRef:
              name: {{ template "gestalt.secretsName" . }}
              key: 'db-password'
        - name: 'DATABASE_NAME'
          value: {{ .Values.security.databaseName | quote }}
        - name: 'OAUTH_RATE_LIMITING_AMOUNT'
          value: '100'
        - name: 'OAUTH_RATE_LIMITING_PERIOD'
          value: '1'
      #   # Mount custom CA-Certs
      #   volumeMounts:
      #   - name: cacerts
      #     mountPath: /etc/ssl/certs/java/cacerts
      #     subPath: cacerts
      # volumes:
      #   - name: cacerts
      #     configMap:
      #       name: {{ template "gestalt.securityName" . }}-cacerts
      #       optional: true
