# Installer debug settings
FOG_CLI_DEBUG: 'false'      # Change to 'true' to enable debugging output in the fog CLI (useful for debugging)
GESTALT_INSTALL_LOGGING_LVL: info   # Change to 'debug' for more logging info
GESTALT_IMAGE_DEBUG: 'false' # TODO: Add

configure_ldap: 'No'
configure_catalog: 'No' # Set to 'Yes' to configure catalog

# K8S_PROVIDER: 'gke' - Must be set for GCP Kubernetes installs
K8S_PROVIDER: 'default'

# Database
PROVISION_INTERNAL_DATABASE: 'Yes'              # Set to 'No' to utilize an external database
DATABASE_HOSTNAME: gestalt-postgresql.gestalt-system.svc.cluster.local
DATABASE_NAME: postgres
DATABASE_PORT: '5432'

CUSTOM_IMAGE_PULL_SECRET: ''
JS_EXECUTOR_MIN_COOL: '1'

# Kong
KONG_0_EXTERNAL_PROTOCOL: http
KONG_0_VIRTUAL_HOST: localhost:31113        # The public URL of the API gateway (e.g. api1.example.com)
KONG_INGRESS_SERVICE_NAME: kng-ext
KONG_MANAGEMENT_NODEPORT: ''
KONG_NODEPORT: '31113'

# Laser
LASER_NODEPORT: ''
LASER_PROVIDER_CUSTOMIZE: '0'
LASER_PROVIDER_CUSTOM_EXECUTORS: python-3x6x1-executor:python-3x6x3-executor
LASER_PROVIDER_DEFINITION: laser-provider
LASER_SERVICE_VHOST: ''

# Logging
LOGGING_HOSTNAME: gestalt-log.gestalt-system.svc.cluster.local
LOGGING_PORT: '80'
LOGGING_PROTOCOL: http
LOGGING_NODEPORT: '31114'
LOGGING_SERVICE_HOST: localhost:31112/log
LOGGING_SERVICE_PROTOCOL: http

# Meta
META_HOSTNAME: gestalt-meta.gestalt-system.svc.cluster.local
META_PORT: '10131'
META_PROTOCOL: http
META_NODEPORT: 31111

# Upgrader
UPGRADE_URL: http://github.com/galacticfog/getaltplatform/upgrades

# Catalog
# CATALOG_URL: https://galacticfog.gitlab.io/gestalt-catalog-ui
 CATALOG_URL: http://localhost:9000/gestalt-catalog-ui/

PYTHON_3_6_1_EXECUTOR_MIN_COOL: '1'
PYTHON_3_6_3_EXECUTOR_MIN_COOL: '1'
PYTHON_EXECUTOR_MIN_COOL: '1'

# RABBIT
RABBIT_HOSTNAME: gestalt-rabbit.gestalt-system
RABBIT_HTTP_PORT: '15672'
RABBIT_PORT: '5672'

# Redis
REDIS_HOSTNAME: gestalt-redis.gestalt-system
REDIS_PORT: 6379

# Security
SECURITY_HOSTNAME: gestalt-security.gestalt-system.svc.cluster.local
SECURITY_PORT: '9455'
SECURITY_PROTOCOL: http

# 'UI'
UI_HOSTNAME: gestalt-ui.gestalt-system.svc.cluster.local
UI_NODEPORT: '31112'
UI_PORT: '80'
UI_PROTOCOL: http

# UBB - billing agent
UBB_HOSTNAME: gestalt-ubb.gestalt-system
UBB_PORT: 6380

# Elastic search
ELASTICSEARCH_HOST: gestalt-elastic.gestalt-system

# Postgres image
POSTGRES_IMAGE: docker.io/postgres:9.6.2    # Set this so the image gets downloaded.
POSTGRES_IMAGE_TAG: '9.6.2'
POSTGRES_IMAGE_NAME: postgres

# Images
DOTNET_EXECUTOR_IMAGE: docker.io/galacticfog/gestalt-laser-executor-dotnet:2.4.1-RC
ELASTICSEARCH_IMAGE:   docker.io/galacticfog/elasticsearch-docker:5.3.1
GOLANG_EXECUTOR_IMAGE: docker.io/galacticfog/gestalt-laser-executor-golang:2.4.1-RC
GRAALVM_EXECUTOR_IMAGE: docker.io/galacticfog/gestalt-laser-executor-graalvm:2.4.1-01bab844
GWM_EXECUTOR_IMAGE:    docker.io/galacticfog/gestalt-api-gateway:2.4.1-RC
GWM_IMAGE:             docker.io/galacticfog/gestalt-api-gateway:2.4.1-RC
JS_EXECUTOR_IMAGE:     docker.io/galacticfog/gestalt-laser-executor-js:2.4.1-RC
JVM_EXECUTOR_IMAGE:    docker.io/galacticfog/gestalt-laser-executor-jvm:2.4.1-RC
KONG_IMAGE:            docker.io/galacticfog/kong:2.4.1-RC
LASER_IMAGE:           docker.io/galacticfog/gestalt-laser:2.4.1-RC
LOGGING_IMAGE:         docker.io/galacticfog/gestalt-log:2.4.1-RC
META_IMAGE:            docker.io/galacticfog/gestalt-meta:2.4.1-RC
NODEJS_EXECUTOR_IMAGE: docker.io/galacticfog/gestalt-laser-executor-nodejs:2.4.1-RC
POLICY_IMAGE:          docker.io/galacticfog/gestalt-policy:2.4.1-RC
PYTHON_3_6_1_EXECUTOR_IMAGE: docker.io/galacticfog/gestalt-laser-executor-python:python-3.6.1
PYTHON_3_6_3_EXECUTOR_IMAGE: docker.io/galacticfog/gestalt-laser-executor-python:python-3.6.3
PYTHON_EXECUTOR_IMAGE:       docker.io/galacticfog/gestalt-laser-executor-python:2.4.1-RC
RABBIT_IMAGE:                docker.io/galacticfog/rabbit:2.4.1-RC
RUBY_EXECUTOR_IMAGE:         docker.io/galacticfog/gestalt-laser-executor-ruby:2.4.1-RC
SECURITY_IMAGE:              docker.io/galacticfog/gestalt-security:2.4.1-RC
UI_IMAGE:                    docker.io/galacticfog/gestalt-ui-react:2.4.1-RC
# UPGRADER_IMAGE:              docker.io/galacticfog/galacticfog/gestalt-upgrader:2.4.1-RC
REDIS_IMAGE:                 redis # gcr.io/galacticfog/gestalt-redis:latest

# GKE specific
GCP_TRACKING_SERVICE_IMAGE:  gcr.io/galacticfog/gestalt-tracking-service:latest
GCP_UBB_IMAGE:               gcr.io/galacticfog/gestalt-ubb-agent:latest

# DATABASE_IMAGE:        postgres
# DOTNET_EXECUTOR_IMAGE: docker.io/galacticfog/gestalt-laser-executor-dotnet:latest
# ELASTICSEARCH_IMAGE:   docker.io/galacticfog/elasticsearch-docker:5.3.1
# GOLANG_EXECUTOR_IMAGE: docker.io/galacticfog/gestalt-laser-executor-golang:latest
# GWM_EXECUTOR_IMAGE:    docker.io/galacticfog/gestalt-api-gateway:latest
# GWM_IMAGE:             docker.io/galacticfog/gestalt-api-gateway:latest
# JS_EXECUTOR_IMAGE:     docker.io/galacticfog/gestalt-laser-executor-js:latest
# JVM_EXECUTOR_IMAGE:    docker.io/galacticfog/gestalt-laser-executor-jvm:latest
# KONG_IMAGE:            docker.io/galacticfog/kong:latest
# LASER_IMAGE:           docker.io/galacticfog/gestalt-laser:latest
# LOGGING_IMAGE:         docker.io/galacticfog/gestalt-log:latest
# META_IMAGE:            docker.io/galacticfog/gestalt-meta:latest
# NODEJS_EXECUTOR_IMAGE: docker.io/galacticfog/gestalt-laser-executor-nodejs:latest
# POLICY_IMAGE:          docker.io/galacticfog/gestalt-policy:latest
# # PYTHON_3_6_1_EXECUTOR_IMAGE: docker.io/galacticfog/gestalt-laser-executor-python:python-3.6.1
# # PYTHON_3_6_3_EXECUTOR_IMAGE: docker.io/galacticfog/gestalt-laser-executor-python:python-3.6.3
# PYTHON_EXECUTOR_IMAGE:       docker.io/galacticfog/gestalt-laser-executor-python:latest
# RABBIT_IMAGE:                docker.io/galacticfog/rabbit:latest
# RUBY_EXECUTOR_IMAGE:         docker.io/galacticfog/gestalt-laser-executor-ruby:latest
# SECURITY_IMAGE:              docker.io/galacticfog/gestalt-security:latest
# UI_IMAGE:                    docker.io/galacticfog/gestalt-ui-react:latest

# POSTGRES database settings
# internal_database_pv_storage_class: standard - Must set to 'standard' for GCP Kubernetes installs
internal_database_pv_storage_class: hostpath
internal_database_pv_storage_size: 100Mi
postgres_persistence_subpath: postgres
postgres_memory_request: 100Mi
postgres_cpu_request: 100m
