#!/bin/bash

set -o pipefail

finish() {
  code=$1
  if [ $code -ne 0 ]; then
    echo "Installation failed, cleaning up..."
  fi
  cleanup
  if [ $code -ne 0 ]; then
    echo
    echo "Installation failed, check the 'logs' directory for details."
  fi
}

do_install() {

  date

  . helpers/install-functions.sh
  . ../src/scripts/eula-functions.sh
  . gestalt.conf

  echo "Will use Kubernetes current context '`kubectl config current-context`'."

  # Get profile from 1st argument, otherwise get profile from kubecontext
  local PROFILE
  PROFILE=$(check_profile ${1})
  if [ $? -ne 0 ]; then
    echo "$PROFILE"
    exit 1
  fi

  ./precheck.sh $PROFILE
  exit_on_error "Precheck failed, aborting"

  prompt_or_wait_to_continue

  mkdir -p ./stage
  rm -r ./stage/*
  mkdir -p ./stage/config

  run_helper pre-stage

  cp gestalt-license.json ./stage/config/

  # Concatenates these files together and makes sure each one ends in newline
  awk '{print}' ./base-config.yaml \
                ./credentials.yaml \
                ./profiles/$PROFILE/config.yaml \
  > ./stage/config/install-config.yaml

  cat >> ./stage/config/install-config.yaml <<EOF
RELEASE_NAME: '$RELEASE_NAME'
RELEASE_NAMESPACE: '$RELEASE_NAMESPACE'
EOF
    
  exit_on_error "Failed to generate config, aborting"

  ./stage.sh
  exit_on_error "Stage failed, aborting"

  run_helper pre-install

  ./install.sh $PROFILE
  exit_on_error "Install failed, aborting"

  trap 'finish $?' EXIT

  if ! wait_for_installer_launch ; then
    cleanup
    exit_with_error "Install Pod did not launch in the expected timeframe, aborting."
  fi

  wait_for_install_completion

  cleanup

  trap - EXIT

  run_helper post-install

  fog_cli_login

  display_summary
}


## -- Main --

## Make the install script run itself with a parameter in order to capture all the output from
## and write to a log file
if [ "$1" != "do_install" ]; then 
  mkdir -p ./logs
  rm ./logs/*
  ./install-gestalt-platform do_install $@ 2>&1 | tee -a ./logs/install.log
else
  shift
  do_install $@
fi
